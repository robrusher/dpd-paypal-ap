{
  "name": "paypal-adaptive",
  "version": "0.3.0",
  "author": {
    "name": "Gonzalo Aguirre"
  },
  "description": "Paypal Adaptive (Payments & Accounts) SDK in node.js",
  "main": "./lib/paypal-adaptive.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/gaguirre/paypal-adaptive-sdk-nodejs.git"
  },
  "keywords": [
    "api",
    "paypal",
    "adaptive",
    "payments",
    "accounts",
    "sdk",
    "node"
  ],
  "devDependencies": {
    "mocha": "1.10.0",
    "nock": "0.18.2"
  },
  "engine": {
    "node": ">=0.6"
  },
  "readme": "## Adaptive Payments and Adaptive Accounts SDK\n\nNode.js sdk for Paypal Adaptive Payments and Paypal Adaptive Accounts APIs, without dependencies\n\n### Usage\n  * Add dependency 'paypal-adaptive' in your package.json file.\n  * Require 'paypal-adaptive' in your file.\n\n    ```js\n    var Paypal = require('paypal-adaptive');\n\n    var paypalSdk = new Paypal({\n\t    userId:    'userId',\n\t    password:  'password',\n\t    signature: 'signature',\n\t    sandbox:   true\n\t});\n    ```\n  * Call to sdk methods or to the generic method callApi. If you get an error, you can check the response too for better error handling.\n    ```js\n    var requestData = {\n        requestEnvelope: {\n            errorLanguage:  'en_US',\n            detailLevel:    'ReturnAll'\n        },\n        payKey: 'AP-1234567890'\n    };\n\n    paypalSdk.callApi('AdaptivePayments/PaymentDetails', requestData, function (err, response) {\n        if (err) {\n            // You can see the error\n            console.log(err);\n            //And the original Paypal API response too\n            console.log(response);\n        } else {\n            // Successful response\n            console.log(response);\n        }\n    });\n    ```\n\n### API\n  * GetPaymentOptions\n    ```js\n    var payKey = 'AP-1234567890';\n\n    paypalSdk.getPaymentOptions(payKey, function (err, response) {\n        if (err) {\n            console.log(err);\n        } else {\n            // payments options for this payKey\n            console.log(response);\n        }\n    });\n    ```\n\n  * PaymentDetails\n    ```js\n    // One of this params is required\n    // The payKey\n    var params = {\n        payKey: 'AP-1234567890'\n    };\n    // Or the transactionId\n    var params = {\n        transactionId: 'AP-1234567890'\n    };\n    // Or the trackingId\n    var params = {\n        trackingId: 'AP-1234567890'\n    };\n\n    paypalSdk.paymentDetails(params, function (err, response) {\n        if (err) {\n            console.log(err);\n        } else {\n            // payments details for this payKey, transactionId or trackingId\n            console.log(response);\n        }\n    });\n    ```\n\n  * Pay\n    ```js\n    var payload = {\n        requestEnvelope: {\n            errorLanguage:  'en_US'\n        },\n        actionType:     'PAY',\n        currencyCode:   'USD',\n        feesPayer:      'EACHRECEIVER',\n        memo:           'Chained payment example',\n        cancelUrl:      'http://test.com/cancel',\n        returnUrl:      'http://test.com/success',\n        receiverList: {\n            receiver: [\n                {\n                    email:  'primary@test.com',\n                    amount: '100.00',\n                    primary:'true'\n                },\n                {\n                    email:  'secondary@test.com',\n                    amount: '10.00',\n                    primary:'false'\n                }\n            ]\n        }\n    };\n\n    paypalSdk.pay(payload, function (err, response) {\n        if (err) {\n            console.log(err);\n        } else {\n            // Response will have the original Paypal API response\n            console.log(response);\n            // But also a paymentApprovalUrl, so you can redirect the sender to checkout easily\n            console.log('Redirect to %s', response.paymentApprovalUrl);\n        }\n    });\n    ```\n\n  * Preapproval\n    ```js\n    var payload = {\n        currencyCode:                   'USD',\n        startingDate:                   new Date().toISOString(),\n        endingDate:                     new Date('2020-01-01').toISOString(),\n        returnUrl:                      'http://your-website.com',\n        cancelUrl:                      'http://your-website.com',\n        ipnNotificationUrl:             'http://your-ipn-listener.com',\n        maxNumberOfPayments:            1,\n        displayMaxTotalAmount:          true,\n        maxTotalAmountOfAllPayments:    '100.00',\n        requestEnvelope: {\n            errorLanguage:  'en_US'\n        }\n    }\n\n    paypalSdk.preapproval(payload, function (err, response) {\n        if (err) {\n            console.log(err);\n        } else {\n            // Response will have the original Paypal API response\n            console.log(response);\n            // But also a prepprovalUrl, so you can redirect the sender to approve the payment easily\n            console.log('Redirect to %s', response.prepprovalUrl);\n        }\n    });\n    ```\n\n  **Note:**  \n  The other API methods has default behavior by now: you send a payload and obtains the Paypal original response.\n\n  ```js\n    var payload = {\n        requestEnvelope: {\n            errorLanguage:  'en_US'\n        },\n        // another data required by API method\n    };\n\n    // For Adaptive Payments\n    paypalSdk.cancelPreapproval(payload, function (err, response) {...} });\n\n    paypalSdk.convertCurrency(payload, function (err, response) {...} });\n\n    paypalSdk.executePayment(payload, function (err, response) {...} });\n\n    paypalSdk.getFundingPlans(payload, function (err, response) {...} });\n\n    paypalSdk.getShippingAddresses(payload, function (err, response) {...} });\n\n    paypalSdk.preapprovalDetails(payload, function (err, response) {...} });\n\n    paypalSdk.setPaymentOptions(payload, function (err, response) {...} });\n\n    // For Adaptive Accounts\n    paypalSdk.addBankAccount(payload, function (err, response) {...} });\n\n    paypalSdk.addPaymentCard(payload, function (err, response) {...} });\n\n    paypalSdk.checkComplianceStatus(payload, function (err, response) {...} });\n\n    paypalSdk.createAccount(payload, function (err, response) {...} });\n\n    paypalSdk.getUserAgreement(payload, function (err, response) {...} });\n\n    paypalSdk.getVerifiedStatus(payload, function (err, response) {...} });\n\n    paypalSdk.setFundingSourceConfirmed(payload, function (err, response) {...} });\n\n    paypalSdk.updateComplianceStatus(payload, function (err, response) {...} });\n  ```\n\n### Tests\n  Tests can be runned with:\n\n  ```sh\n  mocha\n  ```\n\n### Reference\n  <a href=\"https://developer.paypal.com/webapps/developer/docs/classic/api/#ap\" target=\"_blank\">Paypal Adaptive Payments</a>  \n  <a href=\"https://developer.paypal.com/webapps/developer/docs/classic/api/#aa\" target=\"_blank\">Paypal Adaptive Accounts</a>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gaguirre/paypal-adaptive-sdk-nodejs/issues"
  },
  "_id": "paypal-adaptive@0.3.0",
  "_from": "paypal-adaptive@0.3.0"
}
